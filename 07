<!doctype html>
<html lang="zh-Hant">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>拉霸抽獎（CSV/貼上 + GitHub 同步，無音效版）</title>
<style>
:root{ --bg:#22060a; --panel:#2b0a0e; --text:#fff3e6; --muted:#ffd7b3; --gold:#ffd166; }
*{box-sizing:border-box}
html,body{margin:0;height:100%;background:radial-gradient(circle at 50% 0%, #5a0d12 0%, #22060a 55%, #170408 100%);color:var(--text);font-family:ui-sans-serif,system-ui,"Segoe UI",Roboto,Helvetica,Arial}

/* 版面 */
.app{min-height:100dvh;display:grid;grid-template-rows:auto 1fr auto}

/* 活動名稱 */
.header{ text-align:center; padding:10px 12px 0 }
#eventTitle{ margin:0; font-weight:900; letter-spacing:.5px; font-size:clamp(18px, 4.8vw, 36px); color:#ffe9cc; text-shadow:0 2px 6px rgba(0,0,0,.35) }

/* 舞台 */
.stage{ display:grid; place-items:center; padding:8px 8px 130px; position:relative }
.machine{
  position:relative; width:min(96vw, 96vh); max-width:1200px;
  background:linear-gradient(#b40f1e,#9b0c19);
  padding:16px 14px 24px; border-radius:22px;
  box-shadow: inset 0 12px 0 rgba(255,255,255,.15), inset 0 -14px 0 rgba(0,0,0,.25), 0 18px 40px rgba(0,0,0,.6);
  border:6px solid #7d0914;
}
.machine .bezel{ border-radius:16px; padding:12px; background:linear-gradient(#ffdfa1,#ffcf54); box-shadow:inset 0 4px 10px rgba(0,0,0,.25); }

/* 視窗 */
.machine .window{
  height:clamp(240px, 62vh, 560px);
  display:block; border-radius:14px; background:linear-gradient(#fff7eb,#fff3df);
  border:6px solid #ffe49c; box-shadow:inset 0 6px 18px rgba(0,0,0,.15);
  position:relative; overflow:hidden;
}

/* 轉軸：一格=視窗高度 */
#slotReel{
  position:absolute; inset:0;
  display:flex; flex-direction:column; align-items:stretch;
  gap:0; padding:0; will-change:transform;
  -webkit-transform: translateZ(0);
  transform: translateZ(0);
  backface-visibility: hidden;
}
.slotItem{
  display:grid; place-items:center;
  font-weight:900; letter-spacing:.5px; color:#a02400;
  background:linear-gradient(#fff7eb,#fff0da);
  width:100%; border-radius:12px; border:2px solid #ffdca0;
  box-shadow:0 2px 8px rgba(0,0,0,.08);
  font-size:clamp(28px, 5.6vw, 64px); padding:10px 12px;
  -webkit-transform: translateZ(0);
  transform: translateZ(0);
  backface-visibility: hidden;
}

/* 結果覆蓋整個視窗（永遠在最上層） */
#resultOverlay{ position:absolute; inset:0; display:grid; place-items:center; pointer-events:none; z-index:6 }
#resultOverlay .pill{
  width:min(86%, 900px); padding:18px 26px; border-radius:18px;
  background:rgba(255,255,255,.97); border:5px solid var(--gold); color:#8a1c00;
  font-weight:900; letter-spacing:.5px; box-shadow:0 14px 36px rgba(0,0,0,.45);
  font-size:clamp(34px, 6.6vw, 84px); text-align:center;
}

/* 按鈕 */
.controls{ display:grid; place-items:center; margin-top:14px }
#spinBtn{
  width:min(80%,420px); height:80px; border-radius:18px; border:none; cursor:pointer;
  font-weight:900; font-size:clamp(20px,3.6vw,30px); color:#fffaf0; text-shadow:0 2px 2px rgba(0,0,0,.25);
  background:linear-gradient(#ff3b3b,#d81826);
  box-shadow:inset 0 -10px 0 rgba(0,0,0,.25), 0 10px 20px rgba(0,0,0,.45);
}
#spinBtn:active{ transform:translateY(1px) }

/* 彩帶 */
#confetti{ position:absolute; inset:0; pointer-events:none; z-index:5 }

/* 後台抽屜（含 GitHub 同步） */
.drawer{ position:fixed; left:0; right:0; bottom:0; z-index:9999; background:linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.08)); }
.drawer-toggle{ display:flex; align-items:center; justify-content:center; gap:8px; width:100%; padding:8px 0; border:none; background:transparent; color:#ffe3bf; cursor:pointer }
.drawer-toggle span{font-size:12px; opacity:.9}
.drawer-panel{ max-height:0; overflow:hidden; transition:max-height .35s ease; background:var(--panel); border-top:1px solid #571019 }
.drawer.open .drawer-panel{ max-height:60dvh }
.panel-inner{ padding:12px; display:grid; gap:12px }
.row{ display:flex; gap:8px; flex-wrap:wrap; align-items:center }
.badge{display:inline-block; padding:2px 8px; border-radius:999px; background:#4a0f16; border:1px solid #6e1620; font-size:12px; color:#ffdcb0}
.small{font-size:12px; color:#ffd7b3}
input,button,textarea,select{background:#3a0d14; color:#ffe9cc; border:1px solid #6e1620; border-radius:8px; padding:8px 10px}
textarea{min-height:76px}
button{cursor:pointer}
.btn{padding:8px 12px; border-radius:10px; border:1px solid #6e1620; background:#3a0d14}
.btn-primary{border-color:#ffb74d; background:#ffb74d; color:#5a2200; font-weight:800}
.btn-ok{border-color:#0aa37f; background:#0aa37f; color:#04120d; font-weight:800}
.btn-warn{border-color:#d97706; background:#d97706; color:#2b1300; font-weight:800}
.table{width:100%; border-collapse:collapse}
.table th,.table td{border-bottom:1px dashed #6e1620; padding:6px; text-align:left; font-size:13px}
.table th{color:#ffd7b3}
.right{text-align:right}

/* 懸浮後台按鈕（備用） */
.fab{
  position:fixed; right:14px; bottom:90px; z-index:10000;
  background:#ffb74d; color:#5a2200; border:none; border-radius:999px; padding:10px 14px; font-weight:900; cursor:pointer;
  box-shadow:0 8px 20px rgba(0,0,0,.4);
}

/* 提示 */
.toast{ position:fixed; left:50%; top:18px; transform:translateX(-50%); background:#3a0d14; border:1px solid #6e1620; padding:8px 14px; border-radius:10px; color:#ffe9cc; opacity:0; transition:.35s; pointer-events:none }
.toast.show{opacity:1}
</style>
</head>
<body>
<div class="app">
  <div class="header"><h1 id="eventTitle">2025 活動抽獎</h1></div>

  <div class="stage">
    <div class="machine" id="machine">
      <div class="bezel">
        <div class="window" id="slotWindow">
          <div id="slotReel"></div>
          <div id="resultOverlay"><div class="pill" id="centerText">準備就緒</div></div>
        </div>
      </div>
      <div class="controls"><button id="spinBtn">立即抽獎</button></div>
      <canvas id="confetti"></canvas>
    </div>
  </div>

  <!-- 底部抽屜 -->
  <div class="drawer" id="drawer">
    <button class="drawer-toggle" id="drawerToggle" aria-expanded="false">
      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 15 6-6 6 6"/></svg>
      <span>後台設定</span>
    </button>
    <div class="drawer-panel" id="drawerPanel">
      <div class="panel-inner">
      
        <!-- 匯入獎項（CSV / 貼上） -->
        <div class="row">
          <span class="badge">匯入獎項（CSV 或貼上）</span>
          <input type="file" id="csvFile" accept=".csv" />
          <button class="btn" id="importBtn">匯入</button>
          <button class="btn-warn" id="resetBtn">重置獎項</button>
          <span class="small">CSV 欄位：<code>name,weight,color(optional),enabled(optional)</code></span>
        </div>
        <textarea id="pasteArea" placeholder="一等獎,1,#FFD166,true
二等獎,2,,true
三等獎,3,,true
謝謝參與,6,#FFE3A0,true"></textarea>

        <!-- GitHub 同步（CSV） -->
        <div class="row">
          <span class="badge">GitHub 同步（CSV）</span>
          <input id="ghRepo" value="defangmall/lucky" style="min-width:260px"/>
          <input id="ghBranch" placeholder="main" style="width:110px"/>
          <input id="ghPath" placeholder="data/prizes07.csv" style="min-width:200px"/>
          <input id="ghToken" type="password" placeholder="GitHub Token（公有 repo 載入可留空，推送必填）" style="min-width:260px"/>
        </div>
        <div class="row">
          <button class="btn" id="loadFromGitHub">從 GitHub 載入</button>
        </div>

        <!-- 設定 -->
        <div class="row">
          <label class="badge">抽獎模式</label>
          <label class="row small"><input type="checkbox" id="allowRepeat"/> 允許同一獎項重複開出</label>
          <label class="row small"><input type="checkbox" id="deterministic"/> 可重現模式</label>
          <input id="seedInput" placeholder="（例如：2025抽獎）" style="min-width:220px"/>
          <span class="badge">轉動秒數</span>
          <input type="number" id="spinSec" min="1" max="15" step="0.5" value="1" style="width:90px"/>
          <button class="btn-ok" id="downloadLog">下載紀錄 CSV</button>
        </div>

        <!-- 目前獎項 -->
        <div>
          <table class="table" id="prizeTable">
            <thead><tr><th>名稱</th><th class="right">權重</th><th>顏色</th><th>啟用</th></tr></thead>
            <tbody></tbody>
          </table>
        </div>

        <!-- 紀錄 -->
        <div>
          <h4 style="margin:8px 0 6px">抽獎紀錄</h4>
          <table class="table" id="logTable">
            <thead><tr><th>時間</th><th>結果</th><th>權重</th><th>模式/種子</th></tr></thead>
            <tbody></tbody>
          </table>
        </div>

      </div>
    </div>
  </div>

  <!-- 懸浮後台按鈕 -->
  <button class="fab" id="fabToggle">⚙ 後台</button>

  <div class="toast" id="toast"></div>
</div>

<script>
/* ===== 工具 ===== */
const $ = s => document.querySelector(s);
const nowISO = () => new Date().toISOString();
function toast(msg){ const t = $('#toast'); t.textContent = msg; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'), 1800); }
function csvEscape(s){ if(s==null) return ""; s=String(s); return /[",\n]/.test(s)?`"${s.replace(/"/g,'""')}"`:s; }
function download(filename, text){ const a=document.createElement('a'); a.href=URL.createObjectURL(new Blob([text],{type:'text/plain;charset=utf-8'})); a.download=filename; a.click(); URL.revokeObjectURL(a.href); }
function mulberry32(seed){ let t = seed>>>0; return function(){ t += 0x6D2B79F5; let r = Math.imul(t ^ t>>>15, 1 | t); r ^= r + Math.imul(r ^ r>>>7, 61 | r); return ((r ^ r>>>14)>>>0)/4294967296; } }
async function seedFromString(str){ if(!str) str=String(Date.now()); const enc=new TextEncoder().encode(str); const hash=await crypto.subtle.digest('SHA-256', enc); const view=new DataView(hash); return view.getUint32(0,true); }

/* ===== 狀態 ===== */
let prizes = [
  {name:'一等獎', weight:1, color:'#FFD166', enabled:true, removed:false},
  {name:'二等獎', weight:2, color:'#FFE3A0', enabled:true, removed:false},
  {name:'三等獎', weight:3, color:'#FFD166', enabled:true, removed:false},
  {name:'謝謝參與', weight:6, color:'#FFE3A0', enabled:true, removed:false},
];
let deterministic=false, seedNote='', prng=null, logs=[];

/* ===== 後台抽屜 ===== */
const drawer = $('#drawer'), drawerToggle = $('#drawerToggle'), fabToggle = $('#fabToggle');
function toggleDrawer(forceOpen){
  const open = (typeof forceOpen==='boolean') ? forceOpen : !drawer.classList.contains('open');
  drawer.classList.toggle('open', open);
  drawerToggle?.setAttribute('aria-expanded', open);
}
drawerToggle?.addEventListener('click', ()=>toggleDrawer());
fabToggle?.addEventListener('click', ()=>toggleDrawer());


/* ===== 轉軸內容：一格 = 視窗高度 ===== */
const windowEl = $('#slotWindow');
const reel = $('#slotReel');
function buildReel(){
  reel.innerHTML = '';
  const active = prizes.filter(p=>p.enabled && !p.removed && p.weight>=0);
  const pool = [...active, ...active, ...active, ...active];
  const itemH = windowEl.clientHeight; // 一格 = 視窗高
  pool.forEach(p=>{
    const div = document.createElement('div');
    div.className = 'slotItem';
    div.style.borderColor = p.color || '#FFD166';
    div.style.height = itemH + 'px';
    div.textContent = p.name;
    reel.appendChild(div);
  });
  reel.style.transform = `translateY(0px)`;
}
window.addEventListener('resize', buildReel);

/* ===== 匯入（CSV / 貼上） ===== */
$('#importBtn').addEventListener('click', async ()=>{
  let text = '';
  const f = $('#csvFile').files[0];
  if(f){ text = await f.text(); } else { text = $('#pasteArea').value.trim(); }
  if(!text){ toast('請先選擇 CSV 或貼上文字'); return; }
  text = text.replace(/\uFEFF/g,'');
  const out = csvTextToPrizes(text);
  if(!out.length){ toast('沒有解析到資料，請確認欄位格式'); return; }
  prizes = out; buildReel(); renderPrizeTable();
  $('#centerText').textContent = '名單已匯入'; toast(`已匯入 ${out.length} 個獎項`);
});

$('#resetBtn').addEventListener('click', ()=>{
  prizes.forEach(p=>{ p.removed=false; p.enabled=true; });
  buildReel(); renderPrizeTable();
  $('#centerText').textContent = '已重置';
});

/* CSV 文字 → prizes 陣列 */
function csvTextToPrizes(text){
  const lines = text.split(/\r?\n/).filter(l=>l.trim().length);
  if(!lines.length) return [];
  let rows = lines;
  const head = lines[0].split(',').map(s=>s.trim().toLowerCase());
  const hasHeader = head.includes('name') || head.includes('weight');
  if(hasHeader) rows = lines.slice(1);
  const out = [];
  rows.forEach(line=>{
    const [name,weight,color,enabled] = line.split(',').map(s=>s?.trim());
    if(!name) return;
    out.push({ name, weight: Number(weight||1)||0, color: color||null, enabled: (enabled==null||enabled==='') ? true : /^(true|1|yes|y)$/i.test(enabled), removed:false });
  });
  // 自動配色（紅金）
  const auto = ['#FFD166','#FFE3A0'];
  out.forEach((p,i)=>{ if(!p.color) p.color = auto[i%2]; });
  return out;
}

/* ===== 目前獎項表 ===== */
function renderPrizeTable(){
  const tb = $('#prizeTable tbody'); tb.innerHTML = '';
  prizes.forEach((p,i)=>{
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td><input value="${p.name}" data-i="${i}" data-k="name"/></td>
      <td class="right"><input type="number" min="0" step="0.1" value="${p.weight}" data-i="${i}" data-k="weight" style="width:100px"/></td>
      <td><input type="color" value="${p.color||'#FFD166'}" data-i="${i}" data-k="color" style="padding:0 4px;width:70px"/></td>
      <td><select data-i="${i}" data-k="enabled"><option value="true"${p.enabled?' selected':''}>啟用</option><option value="false"${!p.enabled?' selected':''}>停用</option></select></td>
    `;
    tb.appendChild(tr);
  });
  tb.querySelectorAll('input,select').forEach(el=>{
    el.addEventListener('change', ()=>{
      const i = Number(el.getAttribute('data-i'));
      const k = el.getAttribute('data-k');
      let v = el.value;
      if(k==='weight') v = Number(v)||0;
      if(k==='enabled') v = (v==='true');
      prizes[i][k] = v;
      buildReel();
    });
  });
}

/* ===== 預設 GitHub 來源（公有 repo 可不填 token）===== */
const GH_DEFAULTS = {
  repo:  "defangmall/lucky",   // ← 改成你的 owner/repo
  branch:"main",                    // ← 預設分支
  path:  "data/prizes07.csv",         // ← CSV 路徑
  token: ""                         // 私有 repo 才需要；前端不建議硬編
};



  
/* ===== RNG / 權重抽選 ===== */
function rng(){ return deterministic && prng ? prng() : crypto.getRandomValues(new Uint32Array(1))[0]/2**32; }
function pickPrize(){
  const pool = prizes.map((p,i)=>({p,i})).filter(x=>x.p.enabled && !x.p.removed && x.p.weight>0);
  const total = pool.reduce((a,b)=>a + Number(b.p.weight||0), 0);
  if(total<=0 || pool.length===0) return null;
  let r = rng() * total;
  for(const x of pool){ r -= Number(x.p.weight||0); if(r <= 0) return x; }
  return pool[pool.length-1];
}

/* ===== 動畫：每次從 0 開始，停在整格 ===== */
let spinning = false;
function easeOutCubic(t){ return 1 - Math.pow(1-t, 3); }
async function spinToLabel(targetName, sec=1){
  if(spinning) return;
  spinning = true;

  const itemH = windowEl.clientHeight;
  const totalItems = reel.children.length;

  // 找第一個同名索引
  let targetIndex = -1;
  for(let i=0;i<totalItems;i++){
    if(reel.children[i].textContent === targetName){ targetIndex = i; break; }
  }
  if(targetIndex<0) targetIndex = totalItems-1;

  const cycles = 10 + Math.floor(Math.random()*5);
  const startY = 0;
  const endY   = -(cycles*itemH + targetIndex*itemH);

  const start = performance.now(), dur = sec*1000;
  function frame(t){
    const k = Math.min(1, (t-start)/dur);
    const eased = (k<0.2)? (k/0.2)*0.3 : (k>0.8)? 0.3 + (k-0.8)/0.2*0.7 : 0.3 + (k-0.2)/0.6*0.4;
    const y = startY + (endY-startY)*easeOutCubic(eased);
    reel.style.transform = `translateY(${y}px)`;
    if(k<1) requestAnimationFrame(frame); else spinning=false;
  }
  return new Promise(res=>{
    requestAnimationFrame(frame);
    setTimeout(()=>{
      reel.style.transform = `translateY(${Math.round(endY)}px)`; // snap
      res();
    }, dur+20);
  });
}

/* ===== 彩帶（簡易） ===== */
const confetti = document.getElementById('confetti'); const cctx = confetti.getContext('2d');
function resizeConfetti(){ const rect = document.getElementById('machine').getBoundingClientRect(); confetti.width = rect.width; confetti.height = rect.height; }
window.addEventListener('resize', resizeConfetti); resizeConfetti();
let confettiAnim = null;
function launchConfetti(durationMs=2200){
  cancelConfetti();
  const W = confetti.width, H = confetti.height;
  const colors = ['#FFD166','#FFE3A0','#fff','#ff4d4d'];
  const parts = Array.from({length:140}, (_,i)=>({
    x: W/2 + (Math.random()*80-40), y: H*0.15 + (Math.random()*40-20),
    vx: (Math.random()*2-1)* (2 + Math.random()*3), vy:  - (4 + Math.random()*3),
    g: 0.12 + Math.random()*0.08, w: 6 + Math.random()*6, h: 10 + Math.random()*10,
    rot: Math.random()*Math.PI, vr: (Math.random()*0.2-0.1), color: colors[i%colors.length]
  }));
  const start = performance.now();
  function tick(t){
    const elapsed = t - start; cctx.clearRect(0,0,W,H);
    parts.forEach(p=>{ p.x+=p.vx; p.y+=p.vy; p.vy+=p.g; p.rot+=p.vr;
      cctx.save(); cctx.translate(p.x,p.y); cctx.rotate(p.rot);
      cctx.fillStyle=p.color; cctx.fillRect(-p.w/2,-p.h/2,p.w,p.h); cctx.restore();
    });
    if(elapsed < durationMs){ confettiAnim = requestAnimationFrame(tick); }
  }
  confettiAnim = requestAnimationFrame(tick);
}
function cancelConfetti(){ if(confettiAnim){ cancelAnimationFrame(confettiAnim); confettiAnim=null; } cctx.clearRect(0,0,confetti.width,confetti.height); }

/* ===== 抽獎流程 ===== */
document.getElementById('spinBtn').addEventListener('click', async ()=>{
  if(spinning) return;
  if(document.getElementById('deterministic').checked && !deterministic){ await setupDeterministic(); }

  const pick = pickPrize();
  if(!pick){ toast('目前沒有可出獎的項目（權重=0 或全部停用）'); return; }

  document.getElementById('centerText').textContent = '抽獎中…';
  cancelConfetti();

  const sec = Math.max(1, Number(document.getElementById('spinSec').value)||1);
  await spinToLabel(pick.p.name, sec);

  document.getElementById('centerText').textContent = `🎉 ${pick.p.name} 🎉`;
  launchConfetti();

  const mode = deterministic ? '可重現' : '安全亂數';
  logs.push({ts:nowISO(), name:pick.p.name, weight:pick.p.weight, mode, seed:seedNote});
  appendLogRow(logs[logs.length-1]);

  if(!document.getElementById('allowRepeat').checked){
    prizes[pick.i].removed = true; prizes[pick.i].enabled = false;
  }
  buildReel(); renderPrizeTable();
});

/* ===== 紀錄表 ===== */
function appendLogRow(r){
  const tr = document.createElement('tr');
  tr.innerHTML = `<td>${r.ts}</td><td>${csvEscape(r.name)}</td><td>${r.weight}</td><td>${r.mode}${r.seed?` / ${csvEscape(r.seed)}`:''}</td>`;
  document.querySelector('#logTable tbody').prepend(tr);
}

document.getElementById('downloadLog').addEventListener('click', ()=>{
  if(logs.length===0) return toast('還沒有紀錄');
  const header = ['timestamp','prize','weight','mode','seed'];
  const rows = logs.map(x => [x.ts,x.name,x.weight,x.mode,x.seed].map(csvEscape).join(','));
  download(`slot_logs_${Date.now()}.csv`, [header.join(',')].concat(rows).join('\n'));
});

/* ===== 可重現亂數 ===== */
document.getElementById('deterministic').addEventListener('change', async ()=>{
  if(document.getElementById('deterministic').checked){ await setupDeterministic(); }
  else { deterministic=false; prng=null; seedNote=''; toast('已切換到安全亂數');}
});
document.getElementById('seedInput').addEventListener('change', async ()=>{ if(document.getElementById('deterministic').checked){ await setupDeterministic(); }});
async function setupDeterministic(){
  deterministic = true;
  seedNote = document.getElementById('seedInput').value.trim() || `(timestamp:${Date.now()})`;
  const seed = await seedFromString(seedNote);
  prng = mulberry32(seed);
  toast('可重現模式啟用');
}

/* ===== GitHub 同步（CSV） ===== */
function toBase64UTF8(str){ return btoa(unescape(encodeURIComponent(str))); }
async function getGitHubFileSHA({owner, repo, path, branch, token}){
  const url = `https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}?ref=${encodeURIComponent(branch)}`;
  const res = await fetch(url, { headers: { ...(token?{Authorization:`Bearer ${token}`}:{}), Accept:'application/vnd.github+json' } });
  if (res.status === 404) return null;
  if (!res.ok) throw new Error(`get SHA 失敗：HTTP ${res.status}`);
  const json = await res.json();
  return json.sha || null;
}
function buildPrizesCSV(prizesArr){
  const header = ['name','weight','color','enabled'];
  const rows = prizesArr.map(p => [
    csvEscape(p.name),
    csvEscape(p.weight ?? ''),
    csvEscape(p.color ?? ''),
    csvEscape(p.enabled ? 'true' : 'false')
  ].join(','));
  return [header.join(','), ...rows].join('\n');
}
async function pushPrizesToGitHub({owner, repo, path, branch='main', token}){
  if(!/\.csv$/i.test(path)) throw new Error('請將 Path 以 .csv 結尾');
  const contentStr = buildPrizesCSV(prizes);
  const contentB64 = toBase64UTF8(contentStr);
  const sha = await getGitHubFileSHA({owner, repo, path, branch, token}).catch(()=>null);
  const url  = `https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`;
  const body = { message: `chore: update prizes07.csv (${new Date().toISOString()})`, content: contentB64, branch };
  if (sha) body.sha = sha;
  const res = await fetch(url, {
    method:'PUT',
    headers:{ Authorization:`Bearer ${token}`, Accept:'application/vnd.github+json', 'Content-Type':'application/json' },
    body: JSON.stringify(body)
  });
  if(!res.ok){ const txt = await res.text().catch(()=> ''); throw new Error(`推送失敗：HTTP ${res.status} ${txt.slice(0,200)}`); }
  return res.json();
}
  
async function loadPrizesFromGitHub({owner, repo, path, branch='main', token}) {
  // 正確處理路徑編碼：逐段 encode，不要把斜線編掉
  const apiPath = String(path).split('/').map(encodeURIComponent).join('/');
  const url = `https://api.github.com/repos/${owner}/${repo}/contents/${apiPath}?ref=${encodeURIComponent(branch)}`;
  const headers = { Accept: 'application/vnd.github+json' };
  if (token) headers.Authorization = `Bearer ${token}`;

  const res = await fetch(url, { headers, cache: 'no-store' });
  if (!res.ok) {
    const txt = await res.text().catch(()=> '');
    throw new Error(`讀取失敗：HTTP ${res.status} ${txt.slice(0,120)}`);
  }
  const json = await res.json();

  // 大檔（>1MB）改抓 download_url
  if (json.size > 1024*1024 && json.download_url) {
    const r2 = await fetch(json.download_url, { cache:'no-store' });
    if (!r2.ok) throw new Error(`下載過大檔案失敗：HTTP ${r2.status}`);
    const bigText = await r2.text();
    const out = csvTextToPrizes(bigText.replace(/\uFEFF/g,''));
    if (!out.length) throw new Error('CSV（large）解析不到資料');
    return out;
  }

  if (!/\.csv$/i.test(json.name || path)) throw new Error('遠端檔案不是 .csv');
  const base64 = (json.content || '').replace(/\n/g,'');
  if (!base64) throw new Error('遠端無內容（content 為空）');

  // base64 -> UTF-8
  const text = decodeURIComponent(escape(atob(base64)));
  if (/<!doctype html>|<html/i.test(text)) throw new Error('收到 HTML（多半是權限不足或路徑錯）');

  const out = csvTextToPrizes(text.replace(/\uFEFF/g,''));
  if (!out.length) throw new Error('CSV 解析不到資料');
  return out;
}



/* ===== 開頁自動從 GitHub 載入（失敗就靜默略過） ===== */
async function autoLoadFromGitHubOnOpen(){
  const sourceRepo   = GH_DEFAULTS.repo;
  const sourceBranch = GH_DEFAULTS.branch || 'main';
  const sourcePath   = GH_DEFAULTS.path   || 'data/prizes07.csv';
  const sourceToken  = GH_DEFAULTS.token  || "";

  if(!sourceRepo) return;
  const [owner, repo] = String(sourceRepo).split('/');
  if(!owner || !repo) return;

  try{
    const out = await loadPrizesFromGitHub({ owner, repo, path: sourcePath, branch: sourceBranch, token: sourceToken });
    if(Array.isArray(out) && out.length){
      prizes = out; buildReel(); renderPrizeTable();
      document.getElementById('centerText').textContent = '已自動載入 GitHub 獎項';
      toast(`已載入 ${out.length} 個獎項（GitHub）`);
      return;
    }
  }catch(err){
    console.warn('Contents API 失敗：', err?.message || err);
    // 公開 repo 備援：raw
    if (!sourceToken) {
      try{
        const rawPath = sourcePath.split('/').map(encodeURIComponent).join('/');
        const rawUrl  = `https://raw.githubusercontent.com/${owner}/${repo}/${encodeURIComponent(sourceBranch)}/${rawPath}`;
        const r = await fetch(rawUrl, { cache:'no-store' });
        if (r.ok) {
          const text = await r.text();
          const out2 = csvTextToPrizes(text.replace(/\uFEFF/g,''));
          if (out2.length) {
            prizes = out2; buildReel(); renderPrizeTable();
            document.getElementById('centerText').textContent = '已自動載入 GitHub（raw 備援）';
            toast(`已載入 ${out2.length} 個獎項（raw.githubusercontent.com）`);
          }
        }
      }catch(e2){
        console.warn('raw 備援錯誤：', e2?.message || e2);
      }
    }
  }
}


  
/* 綁定 GitHub 按鈕 */
document.getElementById('loadFromGitHub')?.addEventListener('click', async ()=>{
  const repoFull = document.getElementById('ghRepo')?.value.trim();
  const branch   = document.getElementById('ghBranch')?.value.trim() || 'main';
  const path     = document.getElementById('ghPath')?.value.trim() || 'data/prizes07.csv';
  const token    = document.getElementById('ghToken')?.value.trim();
  if(!repoFull){ toast('請填 owner/repo'); return; }
  const [owner, repo] = repoFull.split('/');
  if(!owner || !repo){ toast('owner/repo 格式不正確'); return; }
  try{
    toast('讀取中…');
    const out = await loadPrizesFromGitHub({owner, repo, path, branch, token});
    prizes = out; buildReel(); renderPrizeTable();
    $('#centerText').textContent = '已從 GitHub 載入';
    toast(`已載入 ${out.length} 個獎項`);
  }catch(e){ console.error(e); toast(String(e.message||e)); }
});

/* ===== 初始化 ===== */
function init(){
  document.getElementById('allowRepeat').checked = false;
  document.getElementById('deterministic').checked = false;
  document.getElementById('seedInput').value = '';
  buildReel(); renderPrizeTable();
  autoLoadFromGitHubOnOpen();
}
init();
</script>
</body>
</html>
